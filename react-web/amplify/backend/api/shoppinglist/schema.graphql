type User
  @model(queries: { get: "getUser", list: null }, subscriptions: null)
  @auth(rules: [{ allow: owner, ownerField: "id" }]) {
  id: ID!
  name: String
  memberships: [Membership]
    @connection(keyName: "membershipsByUser", fields: ["id"])
}

type Membership
  @model(queries: null, subscriptions: null)
  @key(name: "membershipsByUser", fields: ["userID"])
  @key(name: "membershipsByList", fields: ["listID"]) {
  id: ID!
  userID: ID!
  user: User @connection(fields: ["userID"])
  listID: ID!
  list: ShoppingList @connection(fields: ["listID"])
}

type ShoppingList @model(queries: null, subscriptions: null) {
  id: ID!
  name: String
  users: [Membership] @connection(keyName: "membershipsByList", fields: ["id"])
  items: [Item] @connection(keyName: "itemsByList", fields: ["id"])
}

type Item
  @model(queries: null, subscriptions: null)
  @key(name: "itemsByList", fields: ["listID"]) {
  id: ID!
  name: String!
  quantity: String
  listID: ID!
}

type Subscription {
  syncItems(listID: ID!): Item
    @aws_subscribe(mutations: ["createItem", "updateItem"])
}
